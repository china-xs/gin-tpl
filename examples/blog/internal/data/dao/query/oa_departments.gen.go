// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/china-xs/gin-tpl/examples/blog/internal/data/dao/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newOaDepartments(db *gorm.DB) oaDepartments {
	_oaDepartments := oaDepartments{}

	_oaDepartments.oaDepartmentsDo.UseDB(db)
	_oaDepartments.oaDepartmentsDo.UseModel(&model.OaDepartments{})

	tableName := _oaDepartments.oaDepartmentsDo.TableName()
	_oaDepartments.ALL = field.NewField(tableName, "*")
	_oaDepartments.ID = field.NewInt32(tableName, "id")
	_oaDepartments.PID = field.NewInt32(tableName, "p_id")
	_oaDepartments.LeaderID = field.NewInt32(tableName, "leader_id")
	_oaDepartments.RoleID = field.NewInt32(tableName, "role_id")
	_oaDepartments.Title = field.NewString(tableName, "title")
	_oaDepartments.OrderNum = field.NewInt32(tableName, "order_num")
	_oaDepartments.Remark = field.NewString(tableName, "remark")
	_oaDepartments.PIds = field.NewString(tableName, "p_ids")
	_oaDepartments.OperateID = field.NewInt32(tableName, "operate_id")
	_oaDepartments.CreatedAt = field.NewTime(tableName, "created_at")
	_oaDepartments.UpdatedAt = field.NewTime(tableName, "updated_at")

	_oaDepartments.fillFieldMap()

	return _oaDepartments
}

type oaDepartments struct {
	oaDepartmentsDo oaDepartmentsDo

	ALL       field.Field
	ID        field.Int32
	PID       field.Int32
	LeaderID  field.Int32
	RoleID    field.Int32
	Title     field.String
	OrderNum  field.Int32
	Remark    field.String
	PIds      field.String
	OperateID field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (o oaDepartments) Table(newTableName string) *oaDepartments {
	o.oaDepartmentsDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oaDepartments) As(alias string) *oaDepartments {
	o.oaDepartmentsDo.DO = *(o.oaDepartmentsDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oaDepartments) updateTableName(table string) *oaDepartments {
	o.ALL = field.NewField(table, "*")
	o.ID = field.NewInt32(table, "id")
	o.PID = field.NewInt32(table, "p_id")
	o.LeaderID = field.NewInt32(table, "leader_id")
	o.RoleID = field.NewInt32(table, "role_id")
	o.Title = field.NewString(table, "title")
	o.OrderNum = field.NewInt32(table, "order_num")
	o.Remark = field.NewString(table, "remark")
	o.PIds = field.NewString(table, "p_ids")
	o.OperateID = field.NewInt32(table, "operate_id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *oaDepartments) WithContext(ctx context.Context) *oaDepartmentsDo {
	return o.oaDepartmentsDo.WithContext(ctx)
}

func (o oaDepartments) TableName() string { return o.oaDepartmentsDo.TableName() }

func (o *oaDepartments) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oaDepartments) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["id"] = o.ID
	o.fieldMap["p_id"] = o.PID
	o.fieldMap["leader_id"] = o.LeaderID
	o.fieldMap["role_id"] = o.RoleID
	o.fieldMap["title"] = o.Title
	o.fieldMap["order_num"] = o.OrderNum
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["p_ids"] = o.PIds
	o.fieldMap["operate_id"] = o.OperateID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o oaDepartments) clone(db *gorm.DB) oaDepartments {
	o.oaDepartmentsDo.ReplaceDB(db)
	return o
}

type oaDepartmentsDo struct{ gen.DO }

func (o oaDepartmentsDo) Debug() *oaDepartmentsDo {
	return o.withDO(o.DO.Debug())
}

func (o oaDepartmentsDo) WithContext(ctx context.Context) *oaDepartmentsDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oaDepartmentsDo) Clauses(conds ...clause.Expression) *oaDepartmentsDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oaDepartmentsDo) Returning(value interface{}, columns ...string) *oaDepartmentsDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oaDepartmentsDo) Not(conds ...gen.Condition) *oaDepartmentsDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oaDepartmentsDo) Or(conds ...gen.Condition) *oaDepartmentsDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oaDepartmentsDo) Select(conds ...field.Expr) *oaDepartmentsDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oaDepartmentsDo) Where(conds ...gen.Condition) *oaDepartmentsDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oaDepartmentsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *oaDepartmentsDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o oaDepartmentsDo) Order(conds ...field.Expr) *oaDepartmentsDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oaDepartmentsDo) Distinct(cols ...field.Expr) *oaDepartmentsDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oaDepartmentsDo) Omit(cols ...field.Expr) *oaDepartmentsDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oaDepartmentsDo) Join(table schema.Tabler, on ...field.Expr) *oaDepartmentsDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oaDepartmentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oaDepartmentsDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oaDepartmentsDo) RightJoin(table schema.Tabler, on ...field.Expr) *oaDepartmentsDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oaDepartmentsDo) Group(cols ...field.Expr) *oaDepartmentsDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oaDepartmentsDo) Having(conds ...gen.Condition) *oaDepartmentsDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oaDepartmentsDo) Limit(limit int) *oaDepartmentsDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oaDepartmentsDo) Offset(offset int) *oaDepartmentsDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oaDepartmentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oaDepartmentsDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oaDepartmentsDo) Unscoped() *oaDepartmentsDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oaDepartmentsDo) Create(values ...*model.OaDepartments) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oaDepartmentsDo) CreateInBatches(values []*model.OaDepartments, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oaDepartmentsDo) Save(values ...*model.OaDepartments) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oaDepartmentsDo) First() (*model.OaDepartments, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OaDepartments), nil
	}
}

func (o oaDepartmentsDo) Take() (*model.OaDepartments, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OaDepartments), nil
	}
}

func (o oaDepartmentsDo) Last() (*model.OaDepartments, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OaDepartments), nil
	}
}

func (o oaDepartmentsDo) Find() ([]*model.OaDepartments, error) {
	result, err := o.DO.Find()
	return result.([]*model.OaDepartments), err
}

func (o oaDepartmentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OaDepartments, err error) {
	buf := make([]*model.OaDepartments, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oaDepartmentsDo) FindInBatches(result *[]*model.OaDepartments, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oaDepartmentsDo) Attrs(attrs ...field.AssignExpr) *oaDepartmentsDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oaDepartmentsDo) Assign(attrs ...field.AssignExpr) *oaDepartmentsDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oaDepartmentsDo) Joins(field field.RelationField) *oaDepartmentsDo {
	return o.withDO(o.DO.Joins(field))
}

func (o oaDepartmentsDo) Preload(field field.RelationField) *oaDepartmentsDo {
	return o.withDO(o.DO.Preload(field))
}

func (o oaDepartmentsDo) FirstOrInit() (*model.OaDepartments, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OaDepartments), nil
	}
}

func (o oaDepartmentsDo) FirstOrCreate() (*model.OaDepartments, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OaDepartments), nil
	}
}

func (o oaDepartmentsDo) FindByPage(offset int, limit int) (result []*model.OaDepartments, count int64, err error) {
	if limit <= 0 {
		count, err = o.Count()
		return
	}

	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oaDepartmentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o *oaDepartmentsDo) withDO(do gen.Dao) *oaDepartmentsDo {
	o.DO = *do.(*gen.DO)
	return o
}
